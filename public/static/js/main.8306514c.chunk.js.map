{"version":3,"sources":["api.js","components/items.js","serviceWorker.js","index.js","App.js"],"names":["axios","require","BASE_URL","createItem","item","console","log","url","method","data","headers","updateItem","id","deleteItem","Items","props","useState","uuid","v4","setItem","edit","setEdit","handleItemChange","e","propName","target","dataset","prop","value","saveItem","a","key","res","fetchItems","then","catch","setTimeout","handleSaveItemOnClick","handleDeleteItem","currentTarget","alert","handleEditItem","items","ex","renderedItems","Object","values","map","className","shoppingItem","data-id","onClick","autoFocus","type","name","placeholder","onKeyDown","onChange","data-prop","document","querySelector","innerHTML","tagName","classList","toggle","Boolean","window","location","hostname","match","ReactDOM","render","setItems","useEffect","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8306514c.chunk.js","sourcesContent":["const axios = require('axios');\nconst BASE_URL = 'http://localhost:8000';\n\nexport const listItems = () => {\n    return axios({\n        url: `${BASE_URL}/items`,\n        method: 'get',\n    });\n};\nexport const getItem = id => {\n    return axios({\n        url: `${BASE_URL}/items/${id}`,\n        method: 'get',\n    });\n};\nexport const createItem = item => {\n    console.log('making a post request ... ');\n    return axios({\n        url: `${BASE_URL}/items`,\n        method: 'post',\n        data: item,\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n};\nexport const updateItem = item => {\n    return axios({\n        url: `${BASE_URL}/items/${item.id}`,\n        method: 'put',\n        data: item\n    });\n};\nexport const deleteItem = id => {\n    return axios({\n        url: `${BASE_URL}/items/${id}`,\n        method: 'delete',\n    });\n};\n\n","import React, {useState} from 'react';\nimport uuid from 'uuid';\n\nimport {createItem, deleteItem, updateItem} from \"../api\";\nimport '../App.scss';\n\nexport default function Items(props) {\n    const [item, setItem] = useState({\n        id: uuid.v4(),\n        item: ''\n    });\n    const [edit, setEdit] = useState(false);\n\n    const handleItemChange = e => {\n        const propName = e.target.dataset.prop;\n        setItem({\n            ...item,\n            [propName]: e.target.value\n        });\n    };\n\n    const saveItem = async e => {\n        if (e.key === 'Enter') {\n            let res = edit ? await updateItem({\n                ...item\n            }) : await createItem({\n                ...item\n            });\n            console.log(res.data);\n            props.fetchItems().then().catch();\n            setTimeout(() => {\n                setItem({\n                    id: uuid.v4(),\n                    item: ''\n                });\n            }, 100)\n        }\n    };\n\n    const handleSaveItemOnClick = async e => {\n        let res = edit ? await updateItem({\n            ...item\n        }) : await createItem({\n            ...item\n        });\n        console.log(res.data);\n        props.fetchItems().then().catch();\n        setTimeout(() => {\n            setItem({\n                id: uuid.v4(),\n                item: ''\n            });\n        }, 100)\n    };\n\n    const strikeThrough = (e) => {\n        if (e.target.tagName === 'LI') {\n            e.target.classList.toggle('done');\n        }\n    };\n\n    const handleClear = () => {\n        const ul = document.querySelector('ul');\n        ul.innerHTML = '';\n    };\n\n    const handleDeleteItem = async e => {\n        try {\n            const id = e.currentTarget.dataset.id;\n            const item = await deleteItem(id);\n            const res = await props.fetchItems();\n        } catch (ex) {\n            alert('Could not delete the item!');\n        }\n    };\n\n    const handleEditItem = async e => {\n        try {\n            const {id} = e.currentTarget.dataset;\n            console.log(id);\n            setEdit(true);\n            setItem({\n                ...props.items[id]\n            });\n        } catch (ex) {\n            alert('Could not edit the item!');\n        }\n    };\n\n    const renderedItems = Object.values(props.items).map(item => <div className=\"li-wrapper\" key={item.id} >\n            <li>{item.shoppingItem}</li>\n            <div className=\"div\">\n                <i className=\"fa fa-trash\"\n                   data-id={item.id}\n                   onClick={handleDeleteItem}/>\n\n                <i className=\"fas fa-edit\"\n                   data-id={item.id}\n                   onClick={handleEditItem}/>\n            </div>\n    </div>);\n\n    return (\n        <div className=\"wrapper\">\n            <header>\n                <h1><i className=\"fas fa-shopping-basket fa_custom\"></i> Shopping List</h1>\n\n                <div className=\"borderBottom\">\n                    <div className=\"borderColor1\"></div>\n                    <div className=\"borderColor2\"></div>\n                    <div className=\"borderColor3\"></div>\n                </div>\n            </header>\n            <input autoFocus\n                   type=\"text\"\n                   name=\"\"\n                   id=\"userinput\"\n                   placeholder=\"enter items\"\n                   onKeyDown={saveItem}\n                   onChange={handleItemChange}\n                   data-prop=\"shoppingItem\" />\n\n                <button id=\"enter\"\n                        onClick={handleSaveItemOnClick}\n                        onChange={handleItemChange}>\n                        Enter\n                </button>\n\n                <button id=\"clear\"\n                        onClick={handleClear}>\n                        Clear List\n                </button>\n\n                <section>\n                    <div className=\"background-list\" id=\"ulHook\">\n                        <ul onClick={strikeThrough}>\n                            {renderedItems}\n                        </ul>\n                    </div>\n                </section>\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {useState, useEffect} from 'react';\nimport Items from \"./components/items\";\nimport {listItems} from \"./api\";\n\nexport default function App() {\n    const [items, setItems] = useState({});\n    const fetchItems = async () => {\n        const res = await listItems();\n        console.log(res.data);\n        setItems(res.data);\n    };\n    const cb = () => {\n        fetchItems().then().catch();\n    };\n    useEffect(cb, [true]);\n    return (<div>\n        <Items fetchItems={fetchItems} items={items}/>\n    </div>);\n}"],"sourceRoot":""}