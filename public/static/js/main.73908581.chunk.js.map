{"version":3,"sources":["app/todo/todo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","deleteTodo","id","props","removeTodo","this","value","className","onClick","Component","App","state","todos","complete","currentTodo","filter","handleFilterChange","e","preventDefault","target","dataset","setState","handleTodoChange","event","handleNewTodo","key","newItem","uuid","v4","slice","concat","handleRemove","filteredItems","item","clearComplete","remainingTodos","todo","markComplete","getAttribute","tempTodos","forEach","type","autoFocus","placeholder","onKeyPress","onChange","map","checked","data-id","class","length","data-filter","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73908581.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Todo extends Component {\n    deleteTodo = id => {\n        this.props.removeTodo(id);\n    };\n    render() {\n        return (\n            <label>\n                {this.props.value}\n                <button className=\"destroy\" onClick={() => this.deleteTodo(this.props.id)}></button>\n            </label>\n        );\n    }\n}\n\nexport default Todo;","import React, { Component, useState } from 'react';\nimport Todo from './app/todo/todo';\nimport './app/todo/todo.css';\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom';\nimport uuid from 'uuid';\n\nclass App extends Component {\n    state = {\n        todos: [\n            {\n                id: 'a493a83b-dcdb-475a-8123-3e4b8bf3410c',\n                value: \"Create an app using create-react-app CLI\",\n                complete: true\n            },\n            {\n                id: '8c9fc3c0-3416-489b-a94f-123a6de60f6c',\n                value: \"Style app\",\n                complete: true\n            },\n            {\n                id: '1df70967-7323-4db2-a749-a15d7e6381f3',\n                value: \"Add functionality\",\n                complete: false\n            }\n        ],\n        currentTodo: \"\",\n        filter: 'all'\n    };\n\n    handleFilterChange = e => {\n        e.preventDefault();\n        const filter = e.target.dataset.filter;\n        this.setState({\n            filter\n        });\n    };\n\n    handleTodoChange = event => {\n        this.setState({\n            currentTodo: event.target.value\n        });\n    };\n\n    handleNewTodo = event => {\n        if (event.key === \"Enter\") {\n            event.preventDefault();\n\n            const newItem = {\n                id: uuid.v4(),\n                value: this.state.currentTodo.slice()\n            };\n            this.setState({\n                todos: this.state.todos.concat(newItem),\n                currentTodo: \"\"\n            });\n        }\n    };\n\n    handleRemove = id => {\n        const filteredItems = this.state.todos.filter(item => item.id !== id);\n\n        this.setState({\n            todos: filteredItems\n        });\n    };\n\n    clearComplete = () => {\n        const remainingTodos = this.state.todos.filter(todo => {\n            if (!todo.complete) {\n                return todo;\n            }\n        });\n\n        this.setState({\n            todos: remainingTodos\n        });\n    };\n\n    markComplete = (e) => {\n        let id = e.target.getAttribute('data-id');\n        let tempTodos = this.state.todos;\n\n        tempTodos.forEach((todo) => {\n            if (id === todo.id) {\n                if (todo.complete){\n                    todo.complete = false;\n                }\n                else if (!todo.complete) {\n                    todo.complete = true;\n                }\n            }\n        });\n\n        this.setState({\n            todos: tempTodos\n        });\n    };\n\n    render() {\n        const {filter} = this.state;\n        return (\n            <section className=\"todoapp\">\n\n                <header className=\"header\">\n                    <h1>Todo</h1>\n                    <input type=\"text\"\n                           autoFocus\n                           className=\"new-todo\"\n                           value={this.state.currentTodo}\n                           placeholder=\"What needs to be done?\"\n                           onKeyPress={this.handleNewTodo}\n                           onChange={this.handleTodoChange}\n                    />\n                </header>\n\n                <section className=\"main\">\n                    <ul className={`todo-list ${filter}`}>\n                        {this.state.todos.map(item => {\n                            return (\n                                <li className={item.complete ? \"todo completed\" : \"todo\"}>\n                                    <div className=\"view\">\n                                        <input className=\"toggle\"\n                                               type=\"checkbox\"\n                                               checked={item.complete}\n                                               data-id={item.id}\n                                               onChange={this.markComplete}/>\n                                        <Todo {...item} key={item.id} removeTodo={this.handleRemove} />\n                                    </div>\n                                </li>\n                            );\n                        })}\n                    </ul>\n                </section>\n\n                <Router>\n                    <footer class=\"footer\">\n                        <span class=\"todo-count\"><strong>{(this.state.todos.filter(todo => !todo.complete)).length}</strong> item left</span>\n                        <ul class=\"filters\">\n                            <li>\n                                <a data-filter=\"all\" href=\"#\" onClick={this.handleFilterChange}>All</a>\n                            </li>\n                            <li>\n                                <a data-filter=\"active\"  href=\"#\" onClick={this.handleFilterChange}>Active</a>\n                            </li>\n                            <li>\n                                <a data-filter=\"complete\"  href=\"#\" onClick={this.handleFilterChange}>Completed</a>\n                            </li>\n                        </ul>\n\n                        <button className=\"clear-completed\"\n                                onClick={this.clearComplete}> Clear completed </button>\n                    </footer>\n                </Router>\n\n    </section>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}